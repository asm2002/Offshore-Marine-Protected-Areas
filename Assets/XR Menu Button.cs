//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/XR Menu Button.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @XRMenuButton: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRMenuButton()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XR Menu Button"",
    ""maps"": [
        {
            ""name"": ""XRActions"",
            ""id"": ""d69bbd0d-6ffb-4b61-a442-7312303a7c08"",
            ""actions"": [
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""066af1ea-f08f-47b6-a813-2c52b928b0cb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""80cebb01-6cd3-474b-925f-73cb4bb9e462"",
                    ""path"": ""<XRController>{LeftHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d35de8c-020d-4550-b542-a58d86fa2f02"",
                    ""path"": ""<XRController>{RightHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfb8e86d-6e58-4101-bf3d-3ba7015aaa4b"",
                    ""path"": ""<XRController>{RightHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3c4670e-e308-4146-acf6-f39522d32140"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XRActions
        m_XRActions = asset.FindActionMap("XRActions", throwIfNotFound: true);
        m_XRActions_Menu = m_XRActions.FindAction("Menu", throwIfNotFound: true);
    }

    ~@XRMenuButton()
    {
        Debug.Assert(!m_XRActions.enabled, "This will cause a leak and performance issues, XRMenuButton.XRActions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRActions
    private readonly InputActionMap m_XRActions;
    private List<IXRActionsActions> m_XRActionsActionsCallbackInterfaces = new List<IXRActionsActions>();
    private readonly InputAction m_XRActions_Menu;
    public struct XRActionsActions
    {
        private @XRMenuButton m_Wrapper;
        public XRActionsActions(@XRMenuButton wrapper) { m_Wrapper = wrapper; }
        public InputAction @Menu => m_Wrapper.m_XRActions_Menu;
        public InputActionMap Get() { return m_Wrapper.m_XRActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRActionsActions set) { return set.Get(); }
        public void AddCallbacks(IXRActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_XRActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRActionsActionsCallbackInterfaces.Add(instance);
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IXRActionsActions instance)
        {
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IXRActionsActions instance)
        {
            if (m_Wrapper.m_XRActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXRActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_XRActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XRActionsActions @XRActions => new XRActionsActions(this);
    public interface IXRActionsActions
    {
        void OnMenu(InputAction.CallbackContext context);
    }
}
